#!/bin/bash

if [ -z "$RAW" ]; then
    RAW=
else
    RAW="$RAW"
fi

if [ -z "$GH_USE_HTTPS" ]; then
    GH_USE_HTTPS=
else
    GH_USE_HTTPS="$GH_USE_HTTPS"
fi

if [ -z "$GIT_DIR" ]; then
    GIT_DIR=
else
    GIT_DIR="$GIT_DIR"
fi

if [ -z "$GIT_WORK_TREE" ]; then
    GIT_WORK_TREE=
else
    GIT_WORK_TREE="$GIT_WORK_TREE"
fi

set -euo pipefail

usage()
{
    cat - <<EOF
git-gets [-v|--verbose|-q|--quiet]
    <url> | <user>/<repo> [<branch>|<sha1>]
    [-o <target> | --output=<target>] [-F|--rm-rf]
    [--flat [--tag-file=VERSION]] [-P|--parallel] [-c|--confirm]

git-gets [-v|--verbose|-q|--quiet]
    [-P|--parallel] [-c|--confirm]
EOF
}

git_new() {
    V="$(git version)"
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\..\. ]] && return 1
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\.1.\. ]] && return 1
    return 0
}

fakerealpath() {
    if [[ "$1" =~ ^/ ]]; then
        printf '%s' "$1"
    else
        printf '%s/%s' "$PWD" "$1"
    fi
}

got_dir() {
    set -e
    if [ "$OUTPUT" = "-" ]; then
        [ -n "$VERBOSE" ] && (cd "$(dirname "$1")" && ls -lhAR "$(basename "$1")" >&2)
        (cd "$(dirname "$1")" && tar c "$(basename "$1")")
    elif [ -d "$OUTPUT" ]; then
        if [ -n "$FORCE_DIR" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding directory %q\n' "$OUTPUT" >&2
            rm -rf "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            printf 'Error: Directory %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    elif [ -f "$OUTPUT" ]; then
        if [ -n "$FORCE_DIR" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding file %q\n' "$OUTPUT" >&2
            rm -f "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            printf 'Error: File %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    elif [ -e "$OUTPUT" ]; then
        printf 'Error: Weird file %q exists\n' "$OUTPUT" >&2
        exit 1
    else
        mv "$1" "$OUTPUT"
    fi
    [ -n "$VERBOSE" ] && printf 'size used in /tmp = %s\n' "$(du -sh "$WORK_DIR")" >&2
    T="$2"
    if [ -z "$TAG_FILE" ]; then
        [ -z "$QUIET" ] && printf 'tag = %q\n' "$T" >&2
    else
        if [[ "$TAG_FILE" =~ ^/ ]]; then
            TG="$TAG_FILE"
        elif [ "$OUTPUT" = "-" ]; then
            TG="$OCWD/$TAG_FILE"
        else
            TG="$OUTPUT/$TAG_FILE"
        fi
        [ -z "$QUIET" ] && printf 'tag = %q -> %s\n' "$T" "$TG" >&2
        printf '%s\n' "$T" >"$TG"
    fi
    exit 0
}

got_repo() {
    set -e
    git config core.repositoryformatversion 0

    ARGS=(git reset --hard)
    [ -n "$QUIET" ] && ARGS+=(-q)
    [   -z "$QUIET" ] && "${ARGS[@]}" >&2
    [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2
    [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)

    ARGS=(git -C "$GIT_WORK_TREE" submodule)
    [ -n "$QUIET" ] && ARGS+=(--quiet)
    ARGS+=(init)
    [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
    [   -z "$QUIET" ] && "${ARGS[@]}" >&2
    [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2

    if [ -z "$RAW" ]; then
        exec 4>&2
    fi

    while IFS= read -r -u 3 line; do
        PA="$(git -C "$GIT_WORK_TREE" config --file ".gitmodules" "submodule.$line.path")"
        URL="$(git config "submodule.$line.url")"
        SSHA1="$(git ls-files -s "$PA" | cut -d ' ' -f2)"
        [ -n "$VERBOSE" ] && printf '%s %s %s %s\n' "$line" "$PA" "$URL" "$SSHA1">&2
        if rmdir "$GIT_WORK_TREE/$PA"; then
            true
        else
            printf 'Warning: Skipping %s because the folder is not empty' "$PA" >&2
            continue
        fi
        ARGS=("$0")
        [ -n "$VERBOSE" ] && ARGS+=(--verbose)
        [ -n "$QUIET" ] && ARGS+=(--quiet)
        [ -n "$PARALLEL" ] && ARGS+=(--parallel)
        [ -z "$PARALLEL" ] && [ -n "$CONFIRM" ] && ARGS+=(--confirm)
        ARGS+=(-o "$GIT_WORK_TREE/$PA" "$URL" "$SSHA1")
        GO=YES
        if [ -n "$CONFIRM" ]; then
            PMT="$(printf 'Will clone %s from %s, proceed? (Y/n) ... ' "$PA" "$URL" >&4)"
            while true; do
                read -p "$PMT" -n 1 -r
                case "$REPLY" in
                    "")
                        break
                        ;;
                    y|Y)
                        printf '\n' >&2
                        break
                        ;;
                    n|N)
                        printf '\n' >&2
                        GO=
                        break
                        ;;
                    *)
                        printf '\n' >&2
                        ;;
                esac
            done
        fi
        if [ -n "$GO" ]; then
            [ -z "$QUIET" ] && printf '+++ %s %s %s\n' "$PA" "$URL" "$SSHA1">&2
            [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
            if [ -z "$PARALLEL" ]; then
                RAW=YES "${ARGS[@]}" 2>&1 | sed 's/^/    /' >&2
            else
                RAW=YES "${ARGS[@]}" 2>&1 | sed 's/^/    /' >&2 &
            fi
        else
            [ -z "$QUIET" ] && printf '%s %s %s %s\n' '---' "$PA" "$URL" "$SSHA1">&2
        fi
    done 3< <(awk -F '"' '/^\[submodule / { print $2; }' "$GIT_DIR/config")

    wait
    if [ -z "$RAW" ]; then
        ARGS=(git -C "$GIT_WORK_TREE" submodule)
        [ -n "$QUIET" ] && ARGS+=(--quiet)
        ARGS+=(absorbgitdirs)
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [   -z "$QUIET" ] && "${ARGS[@]}" >&2
        [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2
    fi
    if [ -z "$SUBMODULE_MODE" ]; then
        [ -n "$FLAT" ] && mv "$GIT_DIR" ".git"
        got_dir "$GIT_WORK_TREE" "$1"
    else
        exit 0
    fi
}

SUBMODULE_MODE=
QUIET=
VERBOSE=
FORCE_DIR=
OUTPUT=
FLAT=
TAG_FILE=
PARALLEL=
CONFIRM=
POSITIONAL=()
while [ $# -gt 0 ]; do
    key="$1"
    case "$key" in
        -h|--help)
            usage
            exit
            ;;
        -q|--quiet)
            QUIET=--quiet
            shift
            ;;
        -v|--verbose)
            VERBOSE=YES
            shift
            ;;
        -F|--rm-rf)
            FORCE_DIR=YES
            shift
            ;;
        -o|--output)
            OUTPUT="$2"
            shift
            shift
            ;;
        -o-)
            OUTPUT="-"
            shift
            ;;
        --flat)
            FLAT=YES
            shift
            ;;
        --tag-file)
            FLAT=YES
            TAG_FILE="$2"
            shift
            shift
            ;;
        -P|--parallel)
            PARALLEL=YES
            shift
            ;;
        -c|--confirm)
            CONFIRM=YES
            shift
            ;;
        *)
            if [[ "$1" =~ ^-j ]]; then
                PARALLEL="${1#-j}"
            elif [[ "$1" =~ ^--jobs= ]]; then
                PARALLEL="${1#--jobs=}"
            elif [[ "$1" =~ ^--tag-file= ]]; then
                FLAT=YES
                TAG_FILE="${1#--tag-file=}"
            elif [[ "$1" =~ ^--output= ]]; then
                OUTPUT="${1#--output=}"
            elif [[ "$1" =~ ^-o= ]]; then
                OUTPUT="${1#-o=}"
            else
                POSITIONAL+=("$1")
            fi
            shift
            ;;
    esac
done

if [ "${#POSITIONAL[@]}" -eq 0 ]; then
    if git rev-parse HEAD >/dev/null 2>&1; then
        SUBMODULE_MODE=YES
    else
        echo "Error: Must specify <repo-url> (any git remote) or <user>/<repo> (GitHub)"
        exit 1
    fi
else
    if [ -n "$SUBMODULE_MODE" ]; then
        echo "Error: Too many positional arguments." >&2
        exit 1
    fi
    if [ "${#POSITIONAL[@]}" -eq 1 ]; then
        BRANCH="HEAD"
    elif [ "${#POSITIONAL[@]}" -eq 2 ]; then
        BRANCH="${POSITIONAL[1]}"
    elif [ "${#POSITIONAL[@]}" -eq 3 ]; then
        if [ -n "$OUTPUT" ]; then
            echo "Error: Too many positional arguments." >&2
            exit 1
        fi
        BRANCH="${POSITIONAL[1]}"
        OUTPUT="${POSITIONAL[2]}"
    else
        echo "Error: Too many positional arguments." >&2
        exit 1
    fi
fi

if [ -n "$PARALLEL" ] && [ -n "$CONFIRM" ]; then
    echo "Warning: With --parallel, --confirm only works for first-level submodules." >&2
    PMT="Proceed? (y/n) ... "
    while true; do
        read -p "$PMT" -n 1 -r <&2
        case "$REPLY" in
            "")
                ;;
            y|Y)
                printf '\n' >&2
                break
                ;;
            n|N)
                printf '\n' >&2
                exit 2
                ;;
            *)
                printf '\n' >&2
                ;;
        esac
    done
fi

if ! which git >/dev/null; then
    echo "Error: git(1) not found" >&2
    exit 66
fi

git_new || ([ -n "$QUIET" ] && printf 'Warning: You should upgrade your git (currently %s)\n' "$(git version)" >&2)

if [ -n "$FLAT" ]; then
    if [ -z "$TAG_FILE" ]; then
        TAG_FILE="VERSION"
    fi
else
    TAG_FILE=
fi

OCWD="$PWD"

if [ -n "$SUBMODULE_MODE" ]; then
    if [ -n "$OUTPUT" ]; then
        echo "Error: Conflict: --output cannot be used in submodule mode" >&2
        exit 1
    fi
    if [ -n "$FORCE_DIR" ]; then
        echo "Error: Conflict: --rm-rf cannot be used in submodule mode" >&2
        exit 1
    fi
    if [ -n "$GIT_WORK_TREE" ]; then
        GIT_WORK_TREE="$(realpath "$GIT_WORK_TREE")"
    else
        GIT_WORK_TREE="$(git -C "$GIT_WORK_TREE" rev-parse --show-toplevel)"
    fi
    if [ -n "$GIT_DIR" ]; then
        GIT_DIR="$(realpath "$GIT_DIR")"
    else
        GIT_DIR="$(realpath "$(git rev-parse --git-dir)")"
    fi
    export GIT_WORK_TREE
    export GIT_DIR

    if [ -n "$VERBOSE" ]; then
        printf 'RAW=%q\n' "$RAW" >&2
        printf 'FLAT=%q\n' "$FLAT" >&2
        printf 'TAG_FILE=%q\n' "$TAG_FILE" >&2
        printf 'PARALLEL=%q\n' "$PARALLEL" >&2
        printf 'CONFIRM=%q\n' "$CONFIRM" >&2
        printf 'GIT_DIR=%q\n' "$GIT_DIR" >&2
        printf 'GIT_WORK_TREE=%q\n' "$GIT_WORK_TREE" >&2
    fi

    cd "$GIT_WORK_TREE"
    got_repo "$(git rev-parse HEAD)"

    exit 0
fi

if [[ "${POSITIONAL[0]}" =~ ^https://github.com/ ]]; then
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]#https://github.com/}"
    GH_REPO="${GH_REPO%.git}"
    REPO="${POSITIONAL[0]}"
elif [[ "${POSITIONAL[0]}" =~ ^git@github.com: ]]; then
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]#git@github.com:}"
    GH_REPO="${GH_REPO%.git}"
    REPO="${POSITIONAL[0]}"
elif [[ "${POSITIONAL[0]}" =~ ^.*/.*/.*$ ]]; then
    REPO="${POSITIONAL[0]}"
else
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]}"
    if [ -n "$GH_USE_HTTPS" ]; then
        REPO="https://github.com/${POSITIONAL[0]}.git"
    else
        REPO="git@github.com:${POSITIONAL[0]}.git"
    fi
fi

BASENAME="$(basename "$REPO")"
BASENAME="${BASENAME%.git}"
if [ -z "$OUTPUT" ]; then
    OUTPUT="$BASENAME"
fi

if [ ! "$OUTPUT" = '-' ]; then
    OUTPUT="$(fakerealpath "$OUTPUT")"
fi
if [ -n "$VERBOSE" ]; then
    printf 'RAW=%q\n' "$RAW" >&2
    printf 'FORCE_DIR=%q\n' "$FORCE_DIR" >&2
    printf 'OUTPUT=%q\n' "$OUTPUT" >&2
    printf 'FLAT=%q\n' "$FLAT" >&2
    printf 'TAG_FILE=%q\n' "$TAG_FILE" >&2
    printf 'PARALLEL=%q\n' "$PARALLEL" >&2
    printf 'CONFIRM=%q\n' "$CONFIRM" >&2
    printf 'GITHUB=%q\n' "$GITHUB" >&2
    printf 'GH_REPO=%q\n' "$GH_REPO" >&2
    printf 'REPO=%q\n' "$REPO" >&2
    printf 'BRANCH=%q\n' "$BRANCH" >&2
    printf 'BASENAME=%q\n' "$BASENAME" >&2
fi

WORK_DIR="$(realpath "$(mktemp -d)")"
finish() {
    cd /
    rm -rf "$WORK_DIR"
}
trap finish EXIT
cd "$WORK_DIR"

[ -n "$VERBOSE" ] && printf 'WORK_DIR=%q\n' "$WORK_DIR" >&2

# 0. git 2.20+ -> shallow + [filter] -> filter
if git_new; then
    mkdir -p "$BASENAME"
    ARGS=(git clone --bare)
    [ -n "$QUIET" ] && ARGS+=(-q)
    [ -z "$QUIET" ] && ARGS+=(--progress)
    [ ! "$BRANCH" = "HEAD" ] && ARGS+=(--branch "$BRANCH")
    ARGS+=(--depth 1 --no-tags)
    ARGS+=(--filter blob:none)
    ARGS+=("$REPO" "$BASENAME/.git")
    [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
    set +e
    if [ -z "$QUIET" ]; then
        "${ARGS[@]}" 2>&1 | tee clone.log >&2
        R="$?"
    else
        "${ARGS[@]}" 1>clone.log 2>&1
        R="$?"
    fi
    if [ "$R" -eq 0 ]; then
        set -e
        GIT_WORK_TREE="$(realpath "$BASENAME")"
        GIT_DIR="$(realpath "$BASENAME/.git")"
        export GIT_WORK_TREE
        export GIT_DIR
        git config --bool core.bare false
        got_repo "$(git rev-parse HEAD)"
    fi
    set -e
    if grep -q 'warning: Could not find remote branch' clone.log; then
        ARGS=(git clone --mirror --filter tree:0)
        [ -n "$QUIET" ] && ARGS+=(-q)
        [ -z "$QUIET" ] && ARGS+=(--progress)
        ARGS+=("$REPO" "$BASENAME/.git")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        set +e
        if "${ARGS[@]}"; then
            SHA1="$(git -C "$BASENAME" rev-parse "$BRANCH")"
            if [ -n "$SHA1" ]; then
                [ -z "$QUIET" ] && printf 'Got SHA1: %q\n' "$SHA1" >&2
                set -e
                GIT_WORK_TREE="$(realpath "$BASENAME")"
                GIT_DIR="$(realpath "$BASENAME/.git")"
                export GIT_WORK_TREE
                export GIT_DIR
                git config --bool core.bare false
                git update-ref --no-deref HEAD "$SHA1"
                got_repo "$SHA1"
            fi
        fi
        set -e
    fi
    rm -rf "$BASENAME"
fi

printf 'Error: No viable method.\n' >&2
exit 3
