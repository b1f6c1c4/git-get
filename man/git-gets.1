.TH "GIT-GET" "1" "GIT_GET_DATE" "git-get" "git-get manual"
.nh
.SH "NAME"
git-gets - Blazingly fast git clone alternative with submodules support
.SH "SYNOPSIS"
.sp
.nf
\fIgit gets\fR [<options>] <url> [<branch>|<tag>|<sha1>]                \fB(1)\fR
\fIgit gets\fR [<options>] <user>/<repo> [<branch>|<tag>|<sha1>]        \fB(1)\fR
\fIgit gets\fR [<options>]                                              \fB(2)\fR
.fi
.sp
.SH "DESCRIPTION"
.sp
git-gets uses git(1) to \fB(1)\fR download a repo and its submodules from a remote repo\&;
or \fB(2)\fR download submodules of an existing repo.
Only minimium amount of data will be transferred\&.
It cannot restrict itself to a single file or directory; use \fBgit-get\fR(1) if you only need a part of a repo.
.SH "OPTIONS"
.PP
-V, --version
.RS 4
Show \fBgit-get\fR(1) version\&.
.RE
.PP
-h, --help
.RS 4
Show documentation\&.
.RE
.PP
-v, --verbose
.RS 4
Show intermediate steps\&.
.RE
.PP
-q, --quiet
.RS 4
Hide every intermediate information but errors.
This will suppress \fBgit-clone\fR(1) progress report\&.
.RE
.PP
--color[=WHEN], --colour[=WHEN]
.RS 4
Surround important messages with escaping sequences to display them in color. WHEN is \fBnever\fR, \fBalways\fR, or \fB auto \fR.
.RE
.PP
-s, --ssh, -H, --https
.RS 4
Switch between SSH protocol and HTTPS protocol when accessing GitHub.
By default, ssh will be used to access github.com (including gist.github.com).
However, SSH may fail if you are on a machine
without any ssh keypair that can be used to connect to GitHub.
You can manually change such behaviors by \fB-H\fR.
Alternatively, setting environment variable \fBGH_USE_HTTPS\fR
or \fBGH_USE_SSH\fR to any non-empty value has similar effects.
Note that any access to non-GitHub remote repository is NOT affected.
.RE
.PP
--no-recursive
.RS 4
Only the top-level submodules will be downloaded, don't recurse down\&.
.RE
.PP
-o <target>, --output=<target>
.RS 4
Put the downloaded file or directory to <target>\&.
See \fB-F\fR options for overwrite policies\&.
Only valid in form \fB(1)\fR\&.
.RE
.PP
-F, --rm-rf
.RS 4
If <target> is an existing directory,
you may override the directory with \fB-F\fR\&.
Otherwise \fBgit-gets\fR(1) will fail\&.
Only valid in form \fB(1)\fR\&.
.RE
.PP
-x
.RS 4
Preserve and enhance the \fB.git\fR directory to
make the downloaded repository look as similar as one
created by an ordinary \fBgit clone\fR at the cost of a little bit
more network bandwidth and disk space.
This option is only usable in form \fB(1)\fR\&.
You cannot use it together with \fB-g\fR nor \fB-t\fR.
Specifically, using \fB-x\fR has the following effects:
.IP \[bu] 2
All commits will be downloaded: you can still view the full history
when doing a normal \fBgit log\fR.
.IP \[bu]
All trees and blobs will be lazy loaded: they won't be downloaded
until you explicitly checkout / switch / show it.
Thus, running \fBgit log -p\fR or \fBgit log --stat\fR WITHOUT ANY RESTRICTION
will trigger downloading the WHOLE REPOSITORY, an absolute disaster.
.IP \[bu]
\fBgit fetch\fR, \fBgit pull\fR, and \fBgit push\fR will behave (mostly) normal,
instead of mirroring by default.
To take a deeper look on this, please read the following reference:
.I git-partial-clone
.UR https://git-scm.com/docs/partial-clone
.UE .
.RE
.PP
-B, --single-branch
.RS 4
Cleanup unnecessary remote-tracking branches except those explicitly
specified in the command line.
Only makes sense when \fB-x\fR is enabled.
.RE
.PP
-T, --no-tags
.RS 4
Cleanup all tags, including those explicitly specified in the command line.
Only makes sense when \fB-x\fR is enabled.
.RE
.PP
-g, --preserve-git
.RS 4
Preserve the \fB.git\fR directory, but don't do anything superfluous
that may waste network bandwidth.
Compared to \fB-x\fR, using this option will not incur any additional
cost compared to that with neither of \fB-x\fR nor \fB-g\fR.
However, the actual respository may not be as exploitable as before.
See the discussion of \fB-x\fR to see the difference.
You cannot use it together with \fB-x\fR nor \fB-t\fR.
.RE
.PP
-t, --tag-file=VERSION
.RS 4
These options are only valid in form \fB(1)\fR.
Enable the generation of tag file by specifying \fB-t\fR\&.
Rename and relocate the tag file by specifying \fB--tag-file\fR (which implies \fB-t\fR\&.)
Tag file is a file, usually named VERSION, that is put along side with your downloaded file or inside your downloaded directory\&.
It records the SHA-1 of the commit you downloaded it from\&.
Without this file and without \fB.git\fR repo, others will lose track of where the code came from\&.
You cannot use it together with \fB-g\fR.
.RE
.PP
-P, --parallel
.RS 4
Launch multiple instances of \fBgit-clone\fR(1) to speed things up.
.RE
.PP
-c, --confirm
.RS 4
Prompt the user before downloading a submodule\&.
.RE
.PP
--no-init
.RS 4
Do not call \fBgit-submodule init\fR so that only the submodules that have already been inited will be downloaded\&.
All second-level submodules will, however, still be inited and downloaded unless you specified \fB--no-recursive\fR\&.
Only valid in form \fB(2)\fR\&.
.RE
.SH "EXAMPLES"
.PP
Download a repo and submodules:
.sp
.if n \{\
.RS 4
.\}
.nf
Method 1: Paste the original URL into the terminal:
$ git gets https://github.com/b1f6c1c4/git-get
Method 2: Type a few words in the terminal:
$ git gets b1f6c1c4/git-get
.sp
If you want it to be even faster:
$ git gets -P ...
.sp
If you want to make changes and push back:
$ git gets -x ...
.fi
.if n \{\
.RE
.\}
.RE
.PP
You already have a repo, and you want its submodules:
(Usually you will need \fB-x\R, but that's not required)
.sp
.if n \{\
.RS 4
.\}
.nf
$ git gets              # Just give me all
$ git gets -c           # Let me choose
$ git gets --no-init    # Only those with 'git submodule init ...'
.fi
.if n \{\
.RE
.\}
.RE
.SH "VARIABLES"
.PP
GH_USE_HTTPS
.RS 4
When called in the minimalistic <user>/<repo> form,
clone from https://github.com instead of git@github.com\&.
Helpful if there isn't an SSH key.
.RE
.SH "SEE ALSO"
.sp
\fBgit-get\fR(1) \fBgit-clone\fR(1)
.SH "GIT-GET"
.sp
Part of the \fBgit-get\fR(1) suite, version GIT_GET_VERSION
