#!/bin/bash

set -euo pipefail

usage()
{
    cat - <<EOF
git-get
    [-v|--verbose|-q|--quiet]
    <url> | <user>/<repo>
    [<branch>|<sha1>]
    [-o <target>] [-f|--force] [-F|--rm-rf]
    [--preserve-git | -t [--tag-file=VERSION]]
    [--token <token> | --token-file <file>]
    [-- <path>]
EOF
}

git_new() {
    V="$(git version)"
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\..\. ]] && return 1
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\.1.\. ]] && return 1
    return 0
}

fakerealpath() {
    if [[ "$1" =~ ^/ ]]; then
        printf '%s' "$1"
    else
        printf '%s/%s' "$PWD" "$1"
    fi
}

TOKEN=
TOKEN_FILE="$HOME/.github-token"
QUIET=
VERBOSE=
FORCE=
FORCE_DIR=
OUTPUT=
PRESERVE=
TAG=
TAG_FILE=
DIR=
POSITIONAL=()
while [ $# -gt 0 ]; do
    key="$1"
    case "$key" in
        -h|--help)
            usage
            exit
            ;;
        -q|--quiet)
            QUIET=--quiet
            shift
            ;;
        -v|--verbose)
            VERBOSE=YES
            shift
            ;;
        -f|--force)
            FORCE=YES
            shift
            ;;
        -F|--rm-rf)
            FORCE_DIR=YES
            shift
            ;;
        -o|--output)
            OUTPUT="$2"
            shift
            shift
            ;;
        -o-)
            OUTPUT="-"
            shift
            ;;
        --preserve-git)
            PRESERVE=YES
            shift
            ;;
        -t|--tag)
            PRESERVE=
            TAG=YES
            shift
            ;;
        --tag-file)
            PRESERVE=
            TAG=YES
            TAG_FILE="$2"
            shift
            shift
            ;;
        --token)
            TOKEN="$2"
            TOKEN_FILE=""
            shift
            shift
            ;;
        --token-file)
            TOKEN=""
            TOKEN_FILE="$2"
            shift
            shift
            ;;
        --)
            DIR="$2"
            shift
            shift
            break
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

if [ "$#" -gt 0 ]; then
    echo "Error: Only one path allowed!" >&2
    exit 1
fi

if [ "${#POSITIONAL[@]}" -eq 0 ]; then
    echo "Error: Must specify <repo-url> (any git remote) or <user>/<repo> (GitHub)"
    exit 1
elif [ "${#POSITIONAL[@]}" -eq 1 ]; then
    BRANCH="HEAD"
elif [ "${#POSITIONAL[@]}" -eq 2 ]; then
    BRANCH="${POSITIONAL[1]}"
else
    echo "Error: Too many positional arguments, maybe you forgot -- before <path>?" >&2
    exit 1
fi

if [[ "${POSITIONAL[0]}" =~ ^https://github.com/ ]]; then
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]#https://github.com/}"
    GH_REPO="${GH_REPO%.git}"
    REPO="${POSITIONAL[0]}"
elif [[ "${POSITIONAL[0]}" =~ ^git@github.com: ]]; then
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]#git@github.com:}"
    GH_REPO="${GH_REPO%.git}"
    REPO="${POSITIONAL[0]}"
elif [[ "${POSITIONAL[0]}" =~ ^.*/.*/.*$ ]]; then
    REPO="${POSITIONAL[0]}"
else
    GITHUB=YES
    GH_REPO="${POSITIONAL[0]}"
    REPO="git@github.com:${POSITIONAL[0]}.git"
fi

if [ ! -z "$DIR" ]; then
    BASENAME="$(basename "$DIR")"
else
    BASENAME="$(basename "$REPO")"
    BASENAME="${BASENAME%.git}"
fi
if [ -z "$OUTPUT" ]; then
    OUTPUT="$BASENAME"
fi

if [ ! -z "$TAG" ]; then
    if [ -z "$TAG_FILE" ]; then
        TAG_FILE="VERSION"
    fi
else
    TAG_FILE=
fi

if [ -z "$TOKEN" ] && [ -f "$TOKEN_FILE" ]; then
    TOKEN="$(cat "$TOKEN_FILE")"
fi

which git >/dev/null
if [ $? -ne 0 ]; then
    echo "Error: git(1) not found"
    exit 66
fi

git_new || ([ ! -z "$QUIET" ] && printf 'Warning: You should upgrade your git (currently %s)\n' "$(git version)" >&2)

if [ ! -z "$FORCE_DIR" ]; then
    FORCE=YES
fi
if [ ! "$OUTPUT" = '-' ]; then
    OUTPUT="$(fakerealpath "$OUTPUT")"
fi
OCWD="$PWD"
if [ ! -z "$VERBOSE" ]; then
    if [ ! -z "$TOKEN" ]; then
        printf 'TOKEN=%s\n' "********" >&2
    else
        printf 'TOKEN=%s\n' "" >&2
    fi
    printf 'OCWD=%q\n' "$OCWD" >&2
    printf 'FORCE=%q\n' "$FORCE" >&2
    printf 'FORCE_DIR=%q\n' "$FORCE_DIR" >&2
    printf 'OUTPUT=%q\n' "$OUTPUT" >&2
    printf 'PRESERVE=%q\n' "$PRESERVE" >&2
    printf 'TAG=%q\n' "$TAG" >&2
    printf 'TAG_FILE=%q\n' "$TAG_FILE" >&2
    printf 'GITHUB=%q\n' "$GITHUB" >&2
    printf 'GH_REPO=%q\n' "$GH_REPO" >&2
    printf 'REPO=%q\n' "$REPO" >&2
    printf 'BRANCH=%q\n' "$BRANCH" >&2
    printf 'DIR=%q\n' "$DIR" >&2
    printf 'BASENAME=%q\n' "$BASENAME" >&2
fi

WORK_DIR="$(realpath "$(mktemp -d)")"
finish() {
    cd /
    rm -rf "$WORK_DIR"
}
trap finish EXIT
cd "$WORK_DIR"

[ ! -z "$VERBOSE" ] && printf 'WORK_DIR=%q\n' "$WORK_DIR" >&2

got_file() {
    set -e
    if [ "$OUTPUT" = "-" ]; then
        cat "$1"
    elif [ -f "$OUTPUT" ]; then
        if [ ! -z "$FORCE" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding file %q\n' "$OUTPUT" >&2
            mv -f "$1" "$OUTPUT"
        else
            printf 'Error: File %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    else
        mv "$1" "$OUTPUT"
    fi
    [ ! -z "$VERBOSE" ] && printf 'size used in /tmp = %s\n' "$(du -sh "$WORK_DIR")" >&2
    [ -z "$QUIET" ] && printf 'tag = %s\n' "$2" >&2
    if [ ! -z "$TAG" ]; then
        if [[ "$TAG_FILE" =~ ^/ ]]; then
            printf '%s\n' "$2" >"$TAG_FILE"
        else
            printf '%s\n' "$2" >"$OCWD/$TAG_FILE"
        fi
    fi
    exit 0
}

got_dir() {
    set -e
    if [ "$OUTPUT" = "-" ]; then
        [ ! -z "$VERBOSE" ] && (cd "$(dirname "$1")" && ls -lhAR "$(basename "$1")" >&2)
        (cd "$(dirname "$1")" && tar c "$(basename "$1")")
    elif [ -d "$OUTPUT" ]; then
        if [ ! -z "$FORCE_DIR" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding directory %q\n' "$OUTPUT" >&2
            rm -rf "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            mv "$1" "$OUTPUT"
        fi
    elif [ -f "$OUTPUT" ]; then
        if [ ! -z "$FORCE" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding file %q\n' "$OUTPUT" >&2
            rm -f "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            printf 'Error: File %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    else
        mv "$1" "$OUTPUT"
    fi
    [ ! -z "$VERBOSE" ] && printf 'size used in /tmp = %s\n' "$(du -sh "$WORK_DIR")" >&2
    [ -z "$QUIET" ] && printf 'tag = %s\n' "$2" >&2
    if [ ! -z "$TAG" ]; then
        if [[ "$TAG_FILE" =~ ^/ ]]; then
            printf '%s\n' "$2" >"$TAG_FILE"
        elif [ "$OUTPUT" = "-" ]; then
            printf '%s\n' "$2" >"$OCWD/$TAG_FILE"
        else
            printf '%s\n' "$2" >"$OUTPUT/$TAG_FILE"
        fi
    fi
    exit 0
}

got_repo() {
    set -e
    git --git-dir="$1/.git" config --bool core.bare false
    if [ -z "$DIR" ]; then
        ARGS=(git reset --hard)
        [ ! -z "$QUIET" ] && ARGS+=(-q)
        [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [   -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ ! -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)
        [ -z "$PRESERVE" ] && mv "$1/.git" ".git"
        got_dir "$1" "$2" && exit 0
    else
        # git restore --worktree issue fetch-pack one-by-another
        # which is super slow
        ARGS=(git reset HEAD)
        [ ! -z "$QUIET" ] && ARGS+=(-q)
        ARGS+=(-- "$DIR")
        [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [   -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ ! -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)

        ARGS=(git restore --worktree)
        [ ! -z "$QUIET" ] && ARGS+=(-q)
        ARGS+=(-- "$DIR")
        [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [   -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ ! -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)
        [ -f "$1/$DIR" ] && got_file "$1/$DIR" "$2"
        [ -d "$1/$DIR" ] && got_dir "$1/$DIR" "$2"
        echo 'Error: File type not supported.' >&2
        exit 2
    fi
}

# TODO: recursive into submodules?
# 0. git 2.20+ -> shallow + [filter] -> filter
if git_new; then
    mkdir -p "$BASENAME"
    ARGS=(git clone --bare)
    [ ! -z "$QUIET" ] && ARGS+=(-q)
    [ ! "$BRANCH" = "HEAD" ] && ARGS+=(--branch "$BRANCH")
    ARGS+=(--depth 1 --no-tags)
    [ ! -z "$DIR" ] && ARGS+=(--filter blob:none)
    ARGS+=("$REPO" "$BASENAME/.git")
    [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
    set +e
    "${ARGS[@]}" 2>&1 | tee clone.log >&2
    if [ "$?" -eq 0 ]; then
        set -e
        got_repo "$BASENAME" "$(git --git-dir="$BASENAME/.git" rev-parse HEAD)"
    fi
    set -e
    if [ ! -z "$(grep 'warning: Could not find remote branch' clone.log)" ]; then
        ARGS=(git clone --mirror --filter tree:0)
        [ ! -z "$QUIET" ] && ARGS+=(-q)
        ARGS+=("$REPO" "$BASENAME/.git")
        [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        set +e
        "${ARGS[@]}"
        if [ "$?" -eq 0 ]; then
            SHA1="$(git --git-dir="$BASENAME/.git" rev-parse "$BRANCH")"
            if [ ! -z "$SHA1" ]; then
                [ -z "$QUIET" ] && printf 'Got SHA1: %q\n' "$SHA1" >&2
                set -e
                git --git-dir="$BASENAME/.git" update-ref --no-deref HEAD "$SHA1"
                got_repo "$BASENAME" "$SHA1"
            fi
        fi
        set -e
    fi
    rm -rf "$BASENAME"
fi

# TODO: recursive into submodules?
# 1. GitHub / Path -> api.github.com/.../contents
if [ ! -z "$GITHUB" ] && [ ! -z "$DIR" ]; then
    ARGS=(curl -f -o file)
    ARGS+=(-w '%{content_type}')
    ARGS+=(-H 'Accept: application/vnd.github.v3.raw')
    [ ! -z "$TOKEN" ] && ARGS+=(-H "Authorization: token $TOKEN")
    [ ! -z "$QUIET" ] && ARGS+=(-s)
    [ ! -z "$VERBOSE" ] && ARGS+=(-S)
    ARGS+=("https://api.github.com/repos/$GH_REPO/contents/$DIR?ref=$BRANCH")
    [ ! -z "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
    set +e
    RES="$("${ARGS[@]}")"
    if [ "$?" -eq 0 ]; then
        set -e
        [[ "$RES" =~ ^application/vnd.github.v3.raw ]] && got_file file "$BRANCH"
        # [[ "$RES" =~ ^application/json ]] && IS_DIR=YES
    fi
    set -e
fi

printf 'Error: No viable method.\n' >&2
exit 3
