#!/bin/bash

GIT_GET_VERSION=

if [ -z "$GH_USE_HTTPS" ]; then
    GH_USE_HTTPS=
else
    GH_USE_HTTPS="$GH_USE_HTTPS"
fi
if [ -z "$GH_USE_SSH" ]; then
    GH_USE_SSH=
else
    GH_USE_SSH="$GH_USE_SSH"
fi

if [ -z "$PREV_TAGS" ]; then
    PREV_TAGS=
else
    PREV_TAGS="$PREV_TAGS"
fi

if [ -z "$OCWD" ]; then
    OCWD="$PWD"
else
    OCWD="$OCWD"
fi

set -euo pipefail

usage()
{
    exec man git-get
}

git_new() {
    V="$(git version)"
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\..\. ]] && return 1
    [[ "$V" =~ ^git[[:space:]]version[[:space:]]2\.1.\. ]] && return 1
    return 0
}

fakerealpath() {
    if [[ "$1" =~ ^/ ]]; then
        printf '%s' "$1"
    else
        printf '%s/%s' "$PWD" "$1"
    fi
}

normalize() {
    X="$1"
    ODIR=
    while [ ! "$X" = "$ODIR" ]; do
        ODIR="$X"
        # shellcheck disable=SC2016
        X="$(sed -E 's_//_/_g; s_/\./_/_g; s_[^/]+/\.\./_/_g; s_/$__g; s_^/__g; s_/\.$__g; s_^\./__g' <<<"$X")"
    done
    printf '%s' "$X"
}

QUIET=
VERBOSE=
FORCE=
FORCE_DIR=
OUTPUT=
PRESERVE=
TAG=
TAG_FILE=
DIR=
POSITIONAL=()
while [ $# -gt 0 ]; do
    key="$1"
    case "$key" in
        -V|--version)
            echo "git-get(1) $GIT_GET_VERSION"
            exit
            ;;
        -h|--help)
            usage
            exit
            ;;
        -q|--quiet)
            QUIET=--quiet
            shift
            ;;
        -v|--verbose)
            VERBOSE=YES
            shift
            ;;
        -s|-ssh)
            GH_USE_HTTPS=
            GH_USE_SSH=YES
            shift
            ;;
        -H|--https)
            GH_USE_HTTPS=YES
            GH_USE_SSH=
            shift
            ;;
        -f|--force)
            FORCE=YES
            shift
            ;;
        -F|--rm-rf)
            FORCE=YES
            FORCE_DIR=YES
            shift
            ;;
        -o|--output)
            OUTPUT="$2"
            shift
            shift
            ;;
        -x)
            if [ "$PRESERVE" = G ]; then
                echo "Error: Conflict: -x and -g|--preserve-git" >&2
                exit 1
            fi
            PRESERVE=X
            shift
            ;;
        -g|--preserve-git)
            if [ "$PRESERVE" = X ]; then
                echo "Error: Conflict: -x and -g|--preserve-git" >&2
                exit 1
            fi
            PRESERVE=G
            shift
            ;;
        -t|--tag)
            TAG=YES
            shift
            ;;
        --tag-file)
            TAG=YES
            TAG_FILE="$2"
            shift
            shift
            ;;
        --)
            DIR="$2"
            shift
            shift
            break
            ;;
        *)
            if [[ "$1" =~ ^--tag-file= ]]; then
                TAG=YES
                TAG_FILE="${1#--tag-file=}"
            elif [[ "$1" =~ ^--output= ]]; then
                OUTPUT="${1#--output=}"
            elif [[ "$1" =~ ^-o= ]]; then
                OUTPUT="${1#-o=}"
            elif [[ "$1" =~ ^-o ]]; then
                OUTPUT="${1#-o}"
            elif [[ "$1" =~ ^-.. ]]; then
                T="$1"
                shift
                set -- '' "${T:0:2}" "-${T:2}" "$@"
            elif [[ "$1" =~ ^- ]]; then
                echo "Error: Unrecognized argument $1" >&2
                exit 1
            else
                POSITIONAL+=("$1")
            fi
            shift
            ;;
    esac
done
if [ -n "$PRESERVE" ] && [ -n "$TAG" ]; then
    echo "Error: Conflict: -x|-g|--preserve-git and -t|--tag|--tag-file" >&2
    exit 1
fi
if [ -n "$PRESERVE" ] && [ -n "$DIR" ]; then
    echo "Error: Conflict: -x|-g|--preserve-git and -- <path>" >&2
    exit 1
fi
if [ -n "$GH_USE_HTTPS" ] && [ -n "$GH_USE_SSH" ]; then
    echo "Error: Conflict: GH_USE_HTTPS and GH_USE_SSH" >&2
    exit 1
fi

if [ "$#" -gt 0 ]; then
    echo "Error: Only one path allowed!" >&2
    exit 1
fi

if [ "${#POSITIONAL[@]}" -eq 0 ]; then
    echo "Error: Must specify <url> or <user>/<repo> (GitHub)"
    exit 1
elif [ "${#POSITIONAL[@]}" -eq 1 ]; then
    BRANCH="HEAD"
elif [ "${#POSITIONAL[@]}" -eq 2 ]; then
    BRANCH="${POSITIONAL[1]}"
else
    echo "Error: Too many positional arguments, maybe you forgot -- before <path>?" >&2
    exit 1
fi

resolve_gh_url() {
    GITHUB=REPO
    AMBI=
    if grep -qP '^[^/]+/[^/]+$' <<<"$1"; then
        GH_REPO="${1%.git}"
    elif grep -qP '^[^/]+/[^/]+/commit/[0-9a-f]{4,40}$' <<<"$1"; then
        if [ "${#POSITIONAL[@]}" -ne 1 ]; then
            echo "Error: Commit is already specified in the URL" >&2
            exit 1
        fi
        GH_REPO="$(grep -Po '^[^/]+/[^/]+(?=/commit/)' <<<"$1")"
        BRANCH="$(sed -E 's_^[^/]+/[^/]+/commit/__' <<<"$1")"
    elif grep -qP '^[^/]+/[^/]+/tree/' <<<"$1"; then
        if [ "${#POSITIONAL[@]}" -ne 1 ]; then
            echo "Error: Branch is already specified in the URL" >&2
            exit 1
        fi
        GH_REPO="$(grep -Po '^[^/]+/[^/]+(?=/tree/)' <<<"$1")"
        BRANCH="$(sed -E 's_^[^/]+/[^/]+/tree/__' <<<"$1")"
        AMBI=VERY_MUCH
    elif grep -qP '^[^/]+/[^/]+/blob/' <<<"$1"; then
        if [ -n "$PRESERVE" ]; then
            echo "Error: Conflict: -x|-g|--preserve-git and -- <path> (in the URL)" >&2
            exit 1
        fi
        if [ "${#POSITIONAL[@]}" -ne 1 ]; then
            echo "Error: Branch is already specified in the URL" >&2
            exit 1
        fi
        GH_REPO="$(grep -Po '^[^/]+/[^/]+(?=/blob/)' <<<"$1")"
        BRANCH="$(sed -E 's_^[^/]+/[^/]+/blob/__' <<<"$1")"
        AMBI=YES
    else
        echo "Error: GitHub URL format not supported, only repo/tree/blob/commit will work" >&2
        exit 1
    fi

    if [ -n "$GH_USE_HTTPS" ]; then
        REPO="https://github.com/$GH_REPO.git"
    else
        REPO="git@github.com:$GH_REPO.git"
    fi

    if [ -n "$AMBI" ]; then
        while [[ "$BRANCH" =~ / ]]; do
            if [ -n "$(git ls-remote "$REPO" "$BRANCH")" ]; then
                break
            fi
            DIR="$(basename "$BRANCH")/$DIR"
            BRANCH="$(dirname "$BRANCH")"
        done
    fi
    unset AMBI
}

resolve_gist_url() {
    GITHUB=GIST
    BRANCH=master
    DIR=
    if [[ "$1" =~ \#file- ]]; then
        DIR="${1#*#file-}"
        GH_REPO="${1%%#*}"
    else
        GH_REPO="$1"
    fi
    if [[ "$GH_REPO" =~ / ]]; then
        GH_REPO="${GH_REPO#*/}"
    fi
    if [[ "$GH_REPO" =~ / ]]; then
        echo "Error: GitHub Gist URL format not supported" >&2
        exit 1
    fi

    if [ -n "$GH_USE_HTTPS" ]; then
        REPO="https://gist.github.com/$GH_REPO.git"
    else
        REPO="git@gist.github.com:$GH_REPO.git"
    fi
}

match_gh_url() {
    [[ ! "${POSITIONAL[0]}" =~ ^$1 ]] && return 1
    [ -n "$2" ] && [ -z "$QUIET" ] && echo "Warning: $1 is an unencryped protocol" >&2
    if [ -n "$3" ]; then
        "$3" "${POSITIONAL[0]#${1}}" YES
    else
        GITHUB=REPO
        GH_REPO="${POSITIONAL[0]#${1}}"
        GH_REPO="${GH_REPO%/}"
        GH_REPO="${GH_REPO%.git}"
        if [ -n "$GH_USE_HTTPS" ]; then
            REPO="https://github.com/$GH_REPO.git"
        elif [ -n "$GH_USE_SSH" ]; then
            REPO="git@github.com:$GH_REPO.git"
        else
            REPO="$1$GH_REPO.git"
        fi
    fi
}

match_gist_url() {
    [[ ! "${POSITIONAL[0]}" =~ ^$1 ]] && return 1
    [ -n "$2" ] && [ -z "$QUIET" ] && echo "Warning: $1 is an unencryped protocol" >&2
    if [ -n "$3" ]; then
        "$3" "${POSITIONAL[0]#${1}}"
    else
        GITHUB=GIST
        GH_REPO="${POSITIONAL[0]#${1}}"
        GH_REPO="${GH_REPO%/}"
        GH_REPO="${GH_REPO%.git}"
        if [ -n "$GH_USE_HTTPS" ]; then
            REPO="https://gist.github.com/$GH_REPO.git"
        elif [ -n "$GH_USE_SSH" ]; then
            REPO="git@gist.github.com:$GH_REPO.git"
        else
            REPO="$1$GH_REPO.git"
        fi
    fi
}

match_gh_url "https://github.com/" '' resolve_gh_url ||
    match_gh_url "http://github.com/" YES resolve_gh_url ||
    match_gh_url "git://github.com/" YES '' ||
    match_gh_url "ssh://git@github.com/" '' '' ||
    match_gh_url "git@github.com:" '' '' ||
    match_gist_url "https://gist.github.com/" '' resolve_gist_url ||
    match_gist_url "http://gist.github.com/" YES resolve_gist_url ||
    match_gist_url "git://gist.github.com/" YES '' ||
    match_gist_url "ssh://git@gist.github.com/" '' '' ||
    match_gist_url "git@gist.github.com:" '' '' ||
    if [[ "${POSITIONAL[0]}" =~ : ]] || [[ "${POSITIONAL[0]}" =~ ^\. ]]; then
        GITHUB=
        GH_REPO=
        REPO="${POSITIONAL[0]}"
    else
        resolve_gh_url "${POSITIONAL[0]}" ''
    fi

if [ -n "$PRESERVE" ] && [ -n "$DIR" ]; then
    echo "Error: Can't use an URL (of a folder or file) with -x|-g|--preserve-git" >&2
    exit 1
fi

DIR="$(normalize "$DIR")"

if [ -n "$DIR" ]; then
    BASENAME="$(basename "$DIR")"
elif [ "$GITHUB" = GIST ]; then
    BASENAME="$GH_REPO"
else
    BASENAME="$(basename "$REPO")"
    BASENAME="${BASENAME%.git}"
fi
if [ -z "$OUTPUT" ]; then
    OUTPUT="$BASENAME"
    DEF_OUTPUT=YES
else
    DEF_OUTPUT=
fi

if [ -n "$TAG" ]; then
    if [ -z "$TAG_FILE" ]; then
        TAG_FILE="VERSION"
    fi
else
    TAG_FILE=
fi

if ! which git >/dev/null; then
    echo "Error: git(1) not found"
    exit 66
fi

git_new || ([ -n "$QUIET" ] && printf 'Warning: You should upgrade your git (currently %s)\n' "$(git version)" >&2)

if [ "$BRANCH" = "HEAD" ]; then
    [ -n "$VERBOSE" ] && echo "Resolving HEAD..." >&2
    BRANCH="$(git ls-remote --symref "$REPO" HEAD | { grep '^ref:' || true; } | cut -d $'\t' -f 1)"
    if [ -z "$BRANCH" ]; then
        [ -z "$QUIET" ] && echo "Weird repo HEAD non-symbolic, still proceeding" >&2
        BRANCH=HEAD
    else
        BRANCH="${BRANCH#ref: }"
        if [ "${BRANCH#refs/heads/}" = "${BRANCH}" ]; then
            [ -z "$QUIET" ] && echo "Weird repo HEAD symbolic, still proceeding" >&2
        else
            BRANCH="${BRANCH#refs/heads/}"
        fi
    fi
fi

if [ ! "$OUTPUT" = '-' ]; then
    OUTPUT="$(fakerealpath "$OUTPUT")"
fi
if [ -n "$VERBOSE" ]; then
    printf 'OCWD=%q\n' "$OCWD" >&2
    printf 'FORCE=%q\n' "$FORCE" >&2
    printf 'FORCE_DIR=%q\n' "$FORCE_DIR" >&2
    printf 'OUTPUT=%q\n' "$OUTPUT" >&2
    printf 'DEF_OUTPUT=%q\n' "$DEF_OUTPUT" >&2
    printf 'PRESERVE=%q\n' "$PRESERVE" >&2
    printf 'TAG=%q\n' "$TAG" >&2
    printf 'TAG_FILE=%q\n' "$TAG_FILE" >&2
    printf 'GITHUB=%q\n' "$GITHUB" >&2
    printf 'GH_REPO=%q\n' "$GH_REPO" >&2
    printf 'REPO=%q\n' "$REPO" >&2
    printf 'BRANCH=%q\n' "$BRANCH" >&2
    printf 'DIR=%q\n' "$DIR" >&2
    printf 'BASENAME=%q\n' "$BASENAME" >&2
    printf 'PREV_TAGS=%q\n' "$PREV_TAGS" >&2
fi

WORK_DIR="$(realpath "$(mktemp -d)")"
finish() {
    cd /
    rm -rf "$WORK_DIR"
}
trap finish EXIT
cd "$WORK_DIR"

[ -n "$VERBOSE" ] && printf 'WORK_DIR=%q\n' "$WORK_DIR" >&2

got_file() {
    set -e
    if [ "$OUTPUT" = "-" ]; then
        if [ "$3" = "LINK" ]; then
            readlink "$1"
        else
            cat "$1"
        fi
    elif [ -f "$OUTPUT" ]; then
        if [ -n "$FORCE" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding file %q\n' "$OUTPUT" >&2
            mv -f "$1" "$OUTPUT"
        else
            printf 'Error: File %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    elif [ -d "$OUTPUT" ]; then
        if [ -n "$DEF_OUTPUT" ]; then
            printf 'Error: There is a directory %q\n' "$OUTPUT" >&2
            exit 1
        else
            mv "$1" "$OUTPUT"
        fi
    elif [ -e "$OUTPUT" ]; then
        printf 'Error: Weird file %q exists\n' "$OUTPUT" >&2
        exit 1
    else
        mv "$1" "$OUTPUT"
    fi
    [ -n "$VERBOSE" ] && printf 'size used in /tmp = %s\n' "$(du -sh "$WORK_DIR")" >&2
    if [ -z "$PREV_TAGS" ]; then
        T="$2"
    else
        T="$(printf '%s\n%s' "$PREV_TAGS" "$2")"
    fi
    if [ -z "$TAG" ]; then
        [ -z "$QUIET" ] && printf 'tag = %q\n' "$T" >&2
    else
        if [[ "$TAG_FILE" =~ ^/ ]]; then
            TG="$TAG_FILE"
        else
            TG="$OCWD/$TAG_FILE"
        fi
        [ -z "$QUIET" ] && printf 'tag = %q -> %s\n' "$T" "$TG" >&2
        printf '%s\n' "$T" >"$TG"
    fi
    exit 0
}

got_dir() {
    set -e
    if [ "$OUTPUT" = "-" ]; then
        [ -n "$VERBOSE" ] && (cd "$(dirname "$1")" && ls -lhAR "$(basename "$1")" >&2)
        (cd "$(dirname "$1")" && tar c "$(basename "$1")")
    elif [ -d "$OUTPUT" ]; then
        if [ -n "$FORCE_DIR" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding directory %q\n' "$OUTPUT" >&2
            rm -rf "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            printf 'Error: Directory %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    elif [ -f "$OUTPUT" ]; then
        if [ -n "$FORCE" ]; then
            [ -z "$QUIET" ] && printf 'Warning: Overriding file %q\n' "$OUTPUT" >&2
            rm -f "$OUTPUT" && mv "$1" "$OUTPUT"
        else
            printf 'Error: File %q exists\n' "$OUTPUT" >&2
            exit 1
        fi
    elif [ -e "$OUTPUT" ]; then
        printf 'Error: Weird file %q exists\n' "$OUTPUT" >&2
        exit 1
    else
        mv "$1" "$OUTPUT"
    fi
    [ -n "$VERBOSE" ] && printf 'size used in /tmp = %s\n' "$(du -sh "$WORK_DIR")" >&2
    if [ -z "$PREV_TAGS" ]; then
        T="$2"
    else
        T="$(printf '%s\n%s' "$PREV_TAGS" "$2")"
    fi
    if [ -z "$TAG" ]; then
        [ -z "$QUIET" ] && printf 'tag = %q\n' "$T" >&2
    else
        if [[ "$TAG_FILE" =~ ^/ ]]; then
            TG="$TAG_FILE"
        elif [ "$OUTPUT" = "-" ]; then
            TG="$OCWD/$TAG_FILE"
        else
            TG="$OUTPUT/$TAG_FILE"
        fi
        [ -z "$QUIET" ] && printf 'tag = %q -> %s\n' "$T" "$TG" >&2
        printf '%s\n' "$T" >"$TG"
    fi
    exit 0
}

got_repo() {
    set -e
    git config --bool core.bare false
    git config core.repositoryformatversion 0

    if [ -z "$DIR" ]; then
        if [ "$PRESERVE" = X ]; then
            git for-each-ref --format='delete %(refname)' >ref-del
            git config remote.origin.tagOpt --tags
            git config --unset remote.origin.tagOpt
            git config remote.origin.mirror false
            git config --unset remote.origin.mirror
            git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            ARGS=(git fetch origin)
            [ -n "$QUIET" ] && ARGS+=(-q)
            [ -z "$QUIET" ] && "${ARGS[@]}" >&2
            [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2
            if git show-ref --verify "refs/heads/$BRANCH" >/dev/null 2>/dev/null; then
                [ -n "$VERBOSE" ] && echo "Set branch: refs/heads/$BRANCH" >&2
                SET_BR=YES
            else
                [ -n "$VERBOSE" ] && echo "Not a valid branch: refs/heads/$BRANCH" >&2
                SET_BR=
            fi
            git update-ref --stdin <ref-del
            ARGS=(git fetch origin)
            [ -n "$QUIET" ] && ARGS+=(-q)
            [ -z "$QUIET" ] && "${ARGS[@]}" >&2
            [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2
            if [ -n "$SET_BR" ]; then
                ARGS=(git branch -f "$BRANCH")
                ARGS+=("refs/remotes/origin/$BRANCH")
                [ -n "$QUIET" ] && ARGS+=(-q)
                [ -z "$QUIET" ] && "${ARGS[@]}" >&2
                [ -n "$QUIET" ] && "${ARGS[@]}" 2>/dev/null >&2
                git symbolic-ref HEAD "refs/heads/$BRANCH"
            fi
        fi
        unset GIT_DIR
        ARGS=(git reset --hard)
        [ -n "$QUIET" ] && ARGS+=(-q)
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)
        [ -z "$PRESERVE" ] && mv "$1/.git" ".git"
        got_dir "$1" "$2" && exit 0
    else
        # This workaround fixes #14 (https://github.com/b1f6c1c4/git-get/issues/14)
        # which is caused by https://github.com/git/git/commit/35a9f1e99c5d31635bb78a4f2d498e72c04fc471
        P=""
        while IFS= read -r -u 3 line; do
            TP="$(cut -d $'\t' -f 2 <<<"$line")"
            if [ "$TP" = "$DIR" ] || [ ! "${DIR#${TP}/}" = "$DIR" ]; then
                P="$TP"
            fi
        done 3< <(git ls-tree HEAD -r | grep '^160000 commit ')
        unset GIT_DIR
        if [ -n "$P" ]; then
            [ -n "$VERBOSE" ] && printf 'Checking %q -> %s (%q) \n' "$DIR" "commit" "$P" >&2

            # To support legacy git, use git checkout here
            # ARGS=(git restore --source=HEAD --staged --worktree)
            ARGS=(git checkout HEAD)
            [ -n "$QUIET" ] && ARGS+=(-q)
            ARGS+=(-- ".gitmodules" "$P")
            [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
            [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
            [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)

            ARGS=(git submodule)
            [ -n "$QUIET" ] && ARGS+=(--quiet)
            ARGS+=(init)
            [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
            [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
            [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)

            while IFS= read -r -u 3 line; do
                PA="$(git config --file "$1/.gitmodules" "submodule.$line.path")"
                URL="$(git config --file "$1/.git/config" "submodule.$line.url")"
                SSHA1="$(git --git-dir="$1/.git" ls-files -s "$PA" | cut -d ' ' -f2)"
                [ -n "$VERBOSE" ] && printf '%s %s %s %s\n' "$line" "$PA" "$URL" "$SSHA1">&2
                [ ! "$PA" = "$P" ] && continue
                ARGS=("$0")
                [ -n "$VERBOSE" ] && ARGS+=(--verbose)
                [ -n "$QUIET" ] && ARGS+=(--quiet)
                ARGS+=("$URL" "$SSHA1")
                ARGS+=(-o "$OUTPUT")
                [ -n "$FORCE" ] && ARGS+=(--force)
                [ -n "$FORCE_DIR" ] && ARGS+=(--force-dir)
                [ -n "$TAG_FILE" ] && ARGS+=(--tag-file "$TAG_FILE")
                [ ! "$P" = "$DIR" ] && ARGS+=(-- "${DIR#$P/}")
                [ -z "$QUIET" ] && printf '+++ %s %s %s\n' "$PA" "$URL" "$SSHA1">&2
                [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
                if [ -z "$PREV_TAGS" ]; then
                    PREV_TAGS="$2"
                else
                    PREV_TAGS="$(printf '%s\n%s' "$PREV_TAGS" "$2")"
                fi
                OCWD="$OCWD" PREV_TAGS="$PREV_TAGS" "${ARGS[@]}" 2>&1 | sed 's/^/    /' >&2
                exit "$?"
            done 3< <(awk -F '"' '/^\[submodule / { print $2; }' "$1/.git/config")
        fi

        # git restore --worktree issue fetch-pack one-by-another
        # which is super slow

        # This workaround fixes #8 (https://github.com/b1f6c1c4/git-get/issues/8)
        # which is caused by https://github.com/git/git/commit/95acf11a3dc3d18ec999f4913ec6c6a54545c6b7
        ARGS=(git diff-index HEAD --cached -p)
        ARGS+=(-- "$DIR")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >/dev/null)
        [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >/dev/null)

        ARGS=(git reset HEAD)
        [ -n "$QUIET" ] && ARGS+=(-q)
        ARGS+=(-- "$DIR")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)

        # To support legacy git, use git checkout here
        # ARGS=(git restore --worktree)
        ARGS=(git checkout)
        [ -n "$QUIET" ] && ARGS+=(-q)
        ARGS+=(-- "$DIR")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        [ -z "$QUIET" ] && (cd "$1" && "${ARGS[@]}" >&2)
        [ -n "$QUIET" ] && (cd "$1" && "${ARGS[@]}" 2>/dev/null >&2)
        [ -f "$1/$DIR" ] && got_file "$1/$DIR" "$2"
        [ -d "$1/$DIR" ] && got_dir "$1/$DIR" "$2"
        [ -L "$1/$DIR" ] && got_file "$1/$DIR" "$2" LINK
        echo 'Error: File type not supported.' >&2
        exit 2
    fi
}

# 0. git 2.20+ -> shallow + [filter] -> filter
if git_new; then
    mkdir -p "$BASENAME"
    FLAG=YES
    if [ ! "$PRESERVE" = X ]; then
        ARGS=(git clone --bare)
        [ -n "$QUIET" ] && ARGS+=(-q)
        [ -z "$QUIET" ] && ARGS+=(--progress)
        [ ! "$BRANCH" = "HEAD" ] && ARGS+=(--branch "$BRANCH")
        ARGS+=(--depth 1 --no-tags)
        [ -n "$DIR" ] && ARGS+=(--filter blob:none)
        ARGS+=("$REPO" "$BASENAME/.git")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        set +e
        if "${ARGS[@]}" 2>&1 | tee clone.log >&2; then
            set -e
            export GIT_DIR="$BASENAME/.git"
            got_repo "$BASENAME" "$(git rev-parse HEAD)"
        fi
        set -e
        if ! grep -q 'warning: Could not find remote branch' clone.log; then
            FLAG=
        fi
    fi
    if [ -n "$FLAG" ]; then
        ARGS=(git clone --mirror --filter tree:0)
        [ -n "$QUIET" ] && ARGS+=(-q)
        [ -z "$QUIET" ] && ARGS+=(--progress)
        ARGS+=("$REPO" "$BASENAME/.git")
        [ -n "$VERBOSE" ] && (printf '%q ' "${ARGS[@]}" >&2; printf '\n'>&2)
        set +e
        if "${ARGS[@]}"; then
            export GIT_DIR="$BASENAME/.git"
            SHA1="$(git rev-parse "$BRANCH")"
            if [ -n "$SHA1" ]; then
                [ -z "$QUIET" ] && printf 'Got SHA1: %q\n' "$SHA1" >&2
                set -e
                NSHA1="$(git rev-parse "$SHA1^{commit}")"
                [ ! "$SHA1" = "$NSHA1" ] && printf 'Got actual SHA1: %q\n' "$NSHA1" >&2
                git update-ref --no-deref HEAD "$NSHA1"
                got_repo "$BASENAME" "$NSHA1"
            fi
        fi
        set -e
    fi
    rm -rf "$BASENAME"
fi

printf 'Error: No viable method.\n' >&2
exit 3
